{"version":3,"sources":["logo.svg","useQuotes.js","QuoteListWithCustomHook.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useQuotes","numOfQuotes","_useState","useState","_useState2","Object","slicedToArray","quotes","setQuote","_useState3","_useState4","loading","setLoading","useEffect","length","fetch","concat","then","resp","json","QuoteListWithCustomHook","props","_useQuotes","count","react_default","a","createElement","style","margin","map","quote","i","key","author","src","Logo","alt","className","countReducer","state","action","type","initialState","App","_useReducer","useReducer","_useReducer2","dispatch","document","title","newQuotes","toConsumableArray","Fragment","display","flexDirection","src_QuoteListWithCustomHook","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa12adfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { useState, useEffect } from \"react\";\n\nfunction useQuotes(numOfQuotes) {\n  const [quotes, setQuote] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(\n    () => {\n      if (quotes.length < numOfQuotes) {\n        setLoading(true);\n        fetch(\n          `https://breaking-bad-quotes.herokuapp.com/v1/quotes/${numOfQuotes}`\n        )\n          .then(resp => resp.json())\n          .then(quotes => {\n            setLoading(false);\n            setQuote(quotes);\n          });\n      }\n    },\n    [numOfQuotes]\n  );\n\n  return { quotes, loading };\n}\n\nexport default useQuotes;\n","import React from \"react\";\nimport useQuotes from \"./useQuotes\";\nimport Logo from \"./logo.svg\";\n\nfunction QuoteListWithCustomHook(props) {\n  const { loading, quotes } = useQuotes(props.count);\n\n  return (\n    <div style={{ margin: 20 }}>\n      {quotes.map((quote, i) => (\n        <div key={i}>\n          <p>{quote.quote}</p>\n          <p>-- {quote.author}</p>\n        </div>\n      ))}\n      {loading && <img src={Logo} alt=\"logo\" className=\"App-logo\" />}\n    </div>\n  );\n}\n\nexport default QuoteListWithCustomHook;\n","import React from \"react\";\nimport Logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState, useEffect, useReducer } from \"react\";\nimport QuoteListWithCustomHook from \"./QuoteListWithCustomHook\";\n\nconst countReducer = (state, action) => {\n  switch (action.type) {\n    case \"add\": {\n      return {\n        count: state.count + 1\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nconst initialState = { count: 0 };\n\nfunction App() {\n  const [quotes, setQuote] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [state, dispatch] = useReducer(countReducer, initialState);\n  const { count } = state;\n\n  function handleAddClick() {\n    dispatch({ type: \"add\" });\n  }\n\n  // Similar to componentDidMount and componentDidUpdate:\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `Number of quotes ${count}`;\n  });\n  useEffect(\n    () => {\n      if (quotes.length < count) {\n        setLoading(true);\n        fetch(\"https://breaking-bad-quotes.herokuapp.com/v1/quotes\")\n          .then(resp => resp.json())\n          .then(newQuotes => {\n            const quote = newQuotes[0];\n            setLoading(false);\n            setQuote([...quotes, quote]);\n          });\n      }\n    },\n    [count]\n  );\n\n  return (\n    <>\n      <div style={{ margin: 20, display: \"flex\", flexDirection: \"row\" }}>\n        <div style={{ margin: 20 }}>\n          {quotes.map((quote, i) => (\n            <div key={i}>\n              <p>{quote.quote}</p>\n              <p>-- {quote.author}</p>\n            </div>\n          ))}\n          {loading && <img src={Logo} alt=\"logo\" className=\"App-logo\" />}\n        </div>\n        <QuoteListWithCustomHook count={count} />\n      </div>\n      <button onClick={handleAddClick}>Add Quote</button>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}